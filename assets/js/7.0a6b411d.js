(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{514:function(t,e,v){t.exports=v.p+"assets/img/image-20210526215517856.93a4ebb7.png"},515:function(t,e,v){t.exports=v.p+"assets/img/image-20210526220259789.c986ac0a.png"},516:function(t,e,v){t.exports=v.p+"assets/img/image-20210526220318284.10dd6391.png"},517:function(t,e,v){t.exports=v.p+"assets/img/image-20210526230449349.8148d625.png"},518:function(t,e,v){t.exports=v.p+"assets/img/image-20210526230501898.e32db123.png"},519:function(t,e,v){t.exports=v.p+"assets/img/image-20210526233824815.4c8f4147.png"},520:function(t,e,v){t.exports=v.p+"assets/img/image-20210526233857524.d8b71f0f.png"},521:function(t,e,v){t.exports=v.p+"assets/img/image-20210526235840647.fe87d677.png"},548:function(t,e,v){"use strict";v.r(e);var _=v(6),a=Object(_.a)({},(function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"分支简介"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分支简介"}},[t._v("#")]),t._v(" 分支简介")]),t._v(" "),_("p",[t._v("Git 保存的不是文件的变化或者差异，而是一系列不同时刻的 "),_("strong",[t._v("快照")]),t._v(" (snapshot),")]),t._v(" "),_("p",[t._v("当你进行一次提交时，Git 会保存一个提交对象（commit object）。")]),t._v(" "),_("p",[t._v("如下图所示，当你将文件添加到暂存区的时候，git为每一个文件计算校验和 ，然后会把当前版本的文件快照（blob Binary Large Object对象）保存到Git 仓库中  。")]),t._v(" "),_("p",[t._v("当使用 git commit 进行提交操作时，Git 会先计算每一个子目录（本例中只有项目根目录）的校验和， 然后在 Git 仓库中这些校验和保存为树对象。随后，Git 便会创建一个提交对象， 包含作者的姓名和邮箱、提交时输入的信息以及指向它的父对象（上一次的提交对象）的指针  ，指向这个树对象（项目根目录）的指针。")]),t._v(" "),_("p",[_("img",{attrs:{src:v(514),alt:"image-20210526215517856"}})]),t._v(" "),_("p",[_("img",{attrs:{src:v(515),alt:"image-20210526220259789"}})]),t._v(" "),_("p",[t._v("Git 的分支 （标签也是），事实上就是就是指向提交对象的指针")]),t._v(" "),_("p",[_("img",{attrs:{src:v(516),alt:"image-20210526220318284"}})]),t._v(" "),_("h2",{attrs:{id:"分支创建、切换、合并"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分支创建、切换、合并"}},[t._v("#")]),t._v(" 分支创建、切换、合并")]),t._v(" "),_("p",[_("code",[t._v("git branch <name>")]),t._v(" 创建一个name分支，也就是在当前的提交对象上添加一个指针。")]),t._v(" "),_("p",[_("code",[t._v("HEAD")]),t._v(" 是一个特殊指针，指向当前所在的本地分支")]),t._v(" "),_("p",[_("code",[t._v("git checkout <name>")]),t._v("切换到name分支，也就是"),_("code",[t._v("HEAD")]),t._v("修改为指向对应分支")]),t._v(" "),_("p",[t._v("但是checkout歧义较多，新版本提供了"),_("code",[t._v("git switch <name>")]),t._v("切换分支")]),t._v(" "),_("p",[t._v("需要注意的是，分支切换会改变你工作目录中的文件 ，如果有文件修改未提交，会导致无法切换，最好在切换分支之前，保持好一个干净的状态。有两种办法解决这个问题，贮藏  （stashing） 和 修补提交（commit amending） 。")]),t._v(" "),_("hr"),t._v(" "),_("p",[t._v("贮藏  类似于一个栈：")]),t._v(" "),_("p",[_("code",[t._v("git stash push")]),t._v(" 跟踪文件的修改与暂存的改动 存储到栈上，文件回到上一次提交的状态，你可以在任意一个分支上应用这些修改")]),t._v(" "),_("p",[_("code",[t._v("git stash list")]),t._v(" 查看")]),t._v(" "),_("p",[_("code",[t._v("git stash apply")]),t._v(" 应用最新修改（会产生合并冲突  ）。"),_("code",[t._v("git stash apply stash@{2}")]),t._v(" 应用一个旧的修改")]),t._v(" "),_("p",[_("code",[t._v("git stash drop <name>")]),t._v("移除")]),t._v(" "),_("p",[_("code",[t._v("git stash pop")]),t._v(" 应用最新修改并移除")]),t._v(" "),_("hr"),t._v(" "),_("p",[_("code",[t._v("git branch -d <name>")]),t._v(" 删除分支")]),t._v(" "),_("p",[_("code",[t._v("git merge <name>")]),t._v(" 将name分支合并到当前分支")]),t._v(" "),_("p",[t._v("合并有两种情况，如果没有冲突的话：")]),t._v(" "),_("p",[t._v("一种是合并的分支是当前分支的后继，， 如果顺着一个分支走下去能够到达另一个分支，那么 Git 在合并两者的时候， 只会简单的将指针向前推进（指针右移），因为这种情况下的合并操作没有需要解决的分歧——这就叫做 “快进（fast-forward）”")]),t._v(" "),_("p",[t._v("另一种是从某个历史节点分叉开来 ，当前分支所在提交  不是目标提交的祖先，Git 会使用两个分支的末端所指的快照  以及这两个分支的公共祖先  做一个简单的三方合并")]),t._v(" "),_("p",[_("img",{attrs:{src:v(517),alt:"image-20210526230449349"}})]),t._v(" "),_("p",[_("img",{attrs:{src:v(518),alt:"image-20210526230501898"}})]),t._v(" "),_("p",[t._v("Git 将此次三方合并的结果做了一个新的快照并且自动创建一个新的提交指向它")]),t._v(" "),_("p",[t._v("有时候合并操作不会如此顺利 ，比如在两个分支里面都修改了一个文件，这时候可能会产生合并冲突。")]),t._v(" "),_("p",[t._v("这时"),_("code",[t._v("git status")]),t._v("会显示冲突文件")]),t._v(" "),_("p",[t._v("我用vsc，插件会帮助你查看、合并冲突（有概率抽风）")]),t._v(" "),_("h2",{attrs:{id:"远程分支"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#远程分支"}},[t._v("#")]),t._v(" 远程分支")]),t._v(" "),_("p",[t._v("远程跟踪分支是远程分支状态的引用，以 "),_("code",[t._v("<remote>/<branch>")]),t._v(" 的形式命名")]),t._v(" "),_("p",[t._v("比如下面的例子，clone一个仓库，Git 的 clone 命令会为你自动将其命名为 origin，拉取它的所有数据， 创建一个指向它的 master 分支的指针，并且在本地将其命名为 origin/master。 Git 也会给你一个与 origin 的master 分支在指向同一个地方的本地 master 分支")]),t._v(" "),_("p",[_("img",{attrs:{src:v(519),alt:"image-20210526233824815"}})]),t._v(" "),_("p",[t._v("如果你在本地的 master 分支做了一些工作，在同一段时间内有其他人推送提交到 git.ourcompany.com并且更新了它的 master 分支，这就是说你们的提交历史已走向不同的方向。 即便这样，只要你保持不与origin 服务器连接（并拉取数据），你的 origin/master 指针就不会移动。")]),t._v(" "),_("p",[_("img",{attrs:{src:v(520),alt:"image-20210526233857524"}})]),t._v(" "),_("p",[_("code",[t._v("git fetch <remote>")]),t._v("与给定的远程仓库同步数据")]),t._v(" "),_("p",[_("img",{attrs:{src:v(521),alt:"image-20210526235840647"}})]),t._v(" "),_("p",[_("code",[t._v("git push <remote> <branch>")]),t._v(" 推送到远程分支")]),t._v(" "),_("p",[_("code",[t._v("git push origin xx:yy")]),t._v("将本地的 xx 分支推送到远程仓库上的 yy分支  。上面的命令其实是简写，xx和yy同名。")]),t._v(" "),_("p",[_("code",[t._v("git checkout -b <branch> <remote>/<branch>")]),t._v(" 创建一个本地分支并跟踪远程分支")]),t._v(" "),_("p",[_("code",[t._v("git checkout --track <remote>/<branch>")]),t._v(" 同样的效果，不过分支同名")]),t._v(" "),_("p",[_("code",[t._v("git checkout <branch>")]),t._v(" 如果你尝试检出的分支 (a) 不存在且 (b) 刚好只有一个名字与之匹配的远程分支，那么 Git 就会为你创建一个跟踪分支")]),t._v(" "),_("p",[_("code",[t._v("git branch -u <remote>/<branch>")]),t._v(" 为已经存在的分支显示设置跟踪的远程分支。")]),t._v(" "),_("p",[_("code",[t._v("git pull")]),t._v(" 拉取分支，比较复杂，相当于fetch + merge，简单情况下可以用pull，复杂情况下还是fetch和merge单独用")]),t._v(" "),_("p",[_("code",[t._v("git push <remote> --delete <branch>")]),t._v("删除远程分支")]),t._v(" "),_("h2",{attrs:{id:"变基rebase"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#变基rebase"}},[t._v("#")]),t._v(" 变基rebase")]),t._v(" "),_("p",[t._v("rebase的目的和merge类似，"),_("code",[t._v("git rebase <branch>")]),t._v("提取目标分支的变更应用到当前分支，并创建一个新分支。优点是使得提交历史更加整洁 。")]),t._v(" "),_("p",[t._v("个人感觉有点魔法了，官网有一句话")]),t._v(" "),_("blockquote",[_("p",[t._v("如果提交存在于你的仓库之外，而别人可能基于这些提交进行开发，那么不要执行变基。")])]),t._v(" "),_("p",[t._v("感觉比较看团队风格，个人不太喜欢，如果有需要的话再仔细学学吧。")])])}),[],!1,null,null,null);e.default=a.exports}}]);